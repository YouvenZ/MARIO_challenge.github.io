[{"body":"Binks\nJust an example of an additional docs folder.\nSurprised that it doesn't have a left sidebar menu? Worry not; just follow this instructions to enable it.\nTutorials Back to docs ","link":"//localhost:1313/about/","section":"about","title":"About' Docs"},{"body":"Once the challenge has ended. We will showcase the best solution on the website. And include the name and github solution of the winners.\n","link":"//localhost:1313/news/example/summary/","section":"news","title":"Challenge summary"},{"body":"After the end of the challenge we will provide to the communities a set of illustration that best describe the challenges.\n","link":"//localhost:1313/news/example/","section":"news","title":"Data analysis"},{"body":"To get familiar with the challenge and the submission process we have provided some explainations in the sections.\n","link":"//localhost:1313/docs/compose/","section":"docs","title":"Main sections"},{"body":"Once the challenge has ended. We will showcase the best solution on the website. And include the name and github solution of the winners.\n","link":"//localhost:1313/news/","section":"news","title":"News"},{"body":"Data source(s) characteristics Imaging data was acquired with a Spectralis OCT device (Heidelberg Engineering). B-scan definition was 496x1024 pixels; the number of B-scans per C-scan was patient dependent (typically 49 B- scans). Consecutive examinations were registered using the Spectralis follow-up option. The data was exported in XML+bitmap format using the Spectralis software version 6.9.4.0. Data was collected at the Ophthalmology department of Brest University Hospital (France). All patients are followed-up for monitoring and treatment of vascular AMD. Imaging data was collected by ophthalmologists (retina specialists).\nTraining and test case characteristics ‚Ä¢ A case refers to all information that is available for one particular patient in a specific study. This information always includes the image information as specified in data source(s) (see above) and may include context information (see above). Both training and test cases are annotated with survival (binary) 5 years after (first) image was taken.\n‚Ä¢ A case represents all the data from one patient. It is composed of 10 3-D volumes (C-scans) of OCT acquisitions per eye on average (x two eyes per patient) + a 2-D infrared image (localizer) related to each 3-D volume.\nTraining cases: 68 patients Validation cases (off-site evaluation): 34 patients Test cases (on-site evaluation): 34 patients The number of B-scan or C-scan pairs is much larger. For instance, for task 1, the number of B-scan pairs is 14,496 for training, 7,010 for validation and 8,341 for testing.\nData export was manual and therefore time-consuming. Manual annotation of thousands of image pairs by two retinal experts was also a time-consuming task. This was the reason for not collecting a larger dataset. However, this is larger than a similar study published by one of the organizers (https://onlinelibrary.wiley.com/doi/full/10.1111/aos.14055), which involved 70 patients, as opposed to 136 here.\nA ratio of 2:1:1 was used for training:validation:testing.\nThe patients were selected randomly among the vascular AMD patients, so their class distribution follows the real-world distribution. Assignment to the training, validation and test sets was made at random.\nAnnotation characteristics For test cases, two ophthalmologists performed the annotation independently. For training and validation cases, one ophthalmologist performed the annotation. An online annotation tool was designed for the study. Consecutive B-scans were viewed jointly on the same screen (older examination at the top, newer examination at\nthe bottom).\nFor each pair of matched B-scans, the annotator had to assign one of the following 7 labels:\nUninterpretable¬†No activity Activity appearance Persistent activity (worsened)¬†Persistent activity (stable)¬†Persistent activity (improved)¬†Activity disappearance. While the annotations were first disign to be used this way. After some discussion and round of review we have decided to transform the annotation for the tasks.To make the problem less difficult we have reduced to four class the first task. And three class for the\nFor evolution assessment between two consecutives examination (Task 1), the following fo classes are defined:\nREDUCED: 0 = ELIMINATED: 1 or PERSISTENT_REDUCED: 2 STABLE: 1 = INACTIVE: 0 or PERSISTENT_STABLE: 3 WORSENED: 2 = PERSISTENT_WORSENED: 4 or APPEARED: 6 OTHER: 3 = ININTERPRETABLE: -1 and APPEARED_AND_ELIMINATED: 5. For the prediction of the evolution within 3 months (Task 2), the following fo classes are defined:\nREDUCE: 0 = ELIMINATED: 1 or PERSISTENT_REDUCED: 2 STABLE: 1 = INACTIVE: 0 or PERSISTENT_STABLE: 3 WORSENED: 2 = PERSISTENT_WORSENED: 4 or APPEARED: 6 5 patients (from the training set) were used to train the annotators. After annotating these 5 patients: 1) annotations were compared by the challenge organizers and presented to the annotators, 2) the organizers discussed their annotation strategy with each other and 3) they were given the opportunity to revise their annotations. Next, they annotated the remaining 131 patients independently.\nBoth annotators are ophthalmologists (retina specialists) with at least two years of experience in vascular AMD patient monitoring. Annotations from both human graders will not be merged. Agreement between both annotations will be used as a baseline to assess the agreement between an algorithm and a human grader.\nData pre-processing method(s) characteristics The XML metadata files were de-identified and all examination dates were masked (as they may be used to predict treatment decisions).\nBitmap images (BMP) are converted to PNG to save space.\nTwo consecutives 3-D volumes are registered.\nSources of error The main sources of inter-annotator variability are the following\nThe distinction between an absence of disease activity and a stable activity (two types of non-evolution), The distinction between an eliminated activity and a reduced (but not fully eliminated) activity. Experts thus disagreed for about 25% of the B-scan pairs. ","link":"//localhost:1313/docs/compose/data/","section":"docs","title":"üóÇÔ∏è Data"},{"body":"For task 1 The following metrics will be used in the leader board for both phase of task 1\nF1-score, Specificity, Rk-correlation coefficient (RkC) For task 2 The following metrics will be used in the leader board for both phase of task 2\nF1-score Specificity Rk-correlation coefficient (RkC) Quadratic weighted Kappa Ranking method(s) Only participants with comprehensive results for the task will appear in the final ranking. In the final ranking, task 2 will be given a higher weight as it is the most challenging and clinically useful task. ","link":"//localhost:1313/docs/compose/evaluation/","section":"docs","title":" üîé Evaluation and Ranking"},{"body":"TASK 1: Classify evolution between two pairs of 2-D slices from two consecutive 2D OCT acquisitions. The first task focuses on pairs of 2D slices (B-scans) from two consecutive OCT acquisitions. The goal is to classify the evolution between these two slices (before and after), which clinicians typically examine side by side on their screens. For evolution assessment between two consecutives examination (Task 1), the following fo classes are defined.\nREDUCED: 0 = ELIMINATED: 1 or PERSISTENT_REDUCED: 2 STABLE: 1 = INACTIVE: 0 or PERSISTENT_STABLE: 3 WORSENED: 2 = PERSISTENT_WORSENED: 4 or APPEARED: 6 OTHER: 3 = ININTERPRETABLE: -1 and APPEARED_AND_ELIMINATED: 5. Like it is illustrated we provide to participants along side with the OCT for each visit an localizers and some clinical data. We encourage the participants to develop multi-modal method to takle this task. It should be noted that the minimun input expected for your algoritm development should be at least the OCT B-scan.\nTo participate to the challenge register using this link\n","link":"//localhost:1313/docs/compose/task1/","section":"docs","title":"1Ô∏è‚É£üéØ Task 1"},{"body":"TASK 2: Prediction of evolution within 3 mounts of AMD on OCT 2D slices for planning treatment anti-VEGF. The second task focuses on 2D slices level. The goal is to predict the future evolution within 3 months with close monitoring of patients that are enrolled in an anti-VEGF treatments plan. For the prediction of the evolution within 3 months (Task 2), the following fo classes are defined:\nREDUCED: 0 = ELIMINATED: 1 or PERSISTENT_REDUCED: 2 STABLE: 1 = INACTIVE: 0 or PERSISTENT_STABLE: 3 WORSENED: 2 = PERSISTENT_WORSENED: 4 or APPEARED: 6 Like it is illustrated we provide to participants along side with the OCT for each visit an localizers and some clinical data. We encourage the participants to develop multi-modal method to takle this task. It should be noted that the minimun input expected for your algoritm development should be at least the OCT B-scan.\nTo participate to the challenge register using this link\n","link":"//localhost:1313/docs/compose/task2/","section":"docs","title":"2Ô∏è‚É£üéØ Task 2"},{"body":"Challenge papers To ensure transparency and reproducibility, we require participants to submit a brief method description alongside their final test set results. This description should follow the Springer Lecture Notes in Computer Science (LNCS) format.¬†An Overleaf template is available¬†template¬†to facilitate this process.\nThe paper description should focus on the key steps involved in developing your submitted approach.¬†Here are some recommended elements to¬†include:\nIntroduction Method¬†Pre-processing Proposed method Pre-training (if any) Post-processing (if any) Results Discussion Link to public code repository You can submit one paper for both tasks, or separate papers for each task. The choice is yours.\nImportant dates Deadline for paper submission: 01/09/2024 11:59PM (pacific time) Decision about paper (acceptance or rebuttal): 13/11/2024 11:59PM (pacific time) Camera-ready paper: 20/09/2024 11:59PM (pacific time) ","link":"//localhost:1313/docs/compose/challenge_paper/","section":"docs","title":"üìÉ Challenge papers"},{"body":"¬†(Alphabetical order) Team Organizers¬†Technical Alireza Rezaei 1 2\nGwenol√© Quellec 2\nMathieu Lamard 1 2\nMostafa El Habib Daho 1 2\nPierre-Henri Conze 3\nRachid Zeghlache 1 2\nMedical Anas-Alexis Benyoussef 4\nB√©atrice Cochener 1 2 4\nThomas Monfort 4\nTeam Organizers Technical Leila Ryma Lazouni 5 Mohammed El Amine Lazouni¬†5 Zineb Aziza Elaouaber¬†5¬†6 Medical Sofiane Zehar 6\nKarim Boukli Hacene 6\nUniv Bretagne Occidentale, Brest, F-29200 France\nInserm, UMR 1101, Brest, F-29200 France\nIMT Atlantique, Brest, F-29200 France¬†Service d‚ÄôOphtalmologie, CHRU Brest, Brest, F-29200 France\nUniversity of Tlemcen, 13000 Algeria\nLAZOUNI Ophthalmology Clinic, 13000 Tlemcen, Algeria\nContact If you have any question related to the challenge please contact this email address¬†rachid.zeghlache@univ-brest.fr¬†or directly address your issue via the associated with the challenges.\n","link":"//localhost:1313/docs/compose/organizer/","section":"docs","title":"üë• Organizers"},{"body":"üì§ How to make submission ? Our challenges is divided in two tasks Participants can participate to one or both tasks. However for the final ranking only teams with a correct solution for both task will be considered.¬†For both task there is two phases:\nThe preliminary phase: We will provide the training data along side with label¬†and validation without label¬†to participant that have signed the following form.¬†In this phase we ask participants,¬†to submit a .csv directly in the platform. You can look our github page to further details about to submit.¬†This phase will allow us to select finalist for the next phases.\nThe final phase: In this phase we ask the selected participants to submits their algorithm packed in docker format. You can find more details to how perform this in our github page.\nWe wish you the best of luck in your submission ! If you have encounter any issues in the submission process¬†do not hesitate to raise an issue in the github of challenge page or to directly contact us at the following email adresse¬†rachid.zeghlache@univ-brest.fr.\n","link":"//localhost:1313/docs/clarity/","section":"docs","title":"Submission guide"},{"body":"The challenges offer the following awards The top ten performing teams will¬†be invited to participate in a challenge paper. The top-5 teams can have up to 5 co-authors each, while the 6th to¬†10th place teams can have up to 3 co-authors each. In the paper, we will publish a substantial summary of the¬†challenge results. Thank to the initiative of the BASIRA¬†lab¬†and in collaboration with MICCAI PRIME Workshop.¬†All the teams that made to final phase will have the opportunities to have their challenge paper published¬†in the International Workshop on PRedictive Intelligence In MEdicine Part of the book series: Lecture Notes in Computer Science (LNCS). For more detail please refer to the following page.¬†All the teams will received a certificate of achievement. Cash prize money for the top 3 teams ü§ë and best poster and paper will be given. ","link":"//localhost:1313/docs/compose/prizes/","section":"docs","title":"üèÜ Prizes"},{"body":" There several policies that participant are required to consider in order to be included in the competition:\nAll final submissions should be in the form of docker containers and follow the provided template provided by the organizers to be tested successfully. Only fully automated methods are acceptable for participation in this challenge as the submission is in the form of docker containers. It is not possible to submit manual annotations or interactive methods. Submissions will be ranked solely based on their performance on the final test set and according to the criteria explained in the evaluation page. Using pre-trained models on general purpose datasets (like ImageNet) is allowed. Use of external¬†data for model development is not permitted. Writing a technical paper for final submission is compulsory, otherwise the submission will not be considered. Users/teams can have multiple submissions on the preliminary test set to verify the quality of their methods. However, the number of submissions per day per user and for each task is limited to 2 in order to restrict test data hacking. For the final test set, only 2 submission is allowed for each user/team. Users can form a team and participate together. Teams can have different submissions as long as their submissions vary considerably based on the described methodology in their technical papers. Otherwise, organizers have the right to disqualify those submissions at their discretion. Members from the organizing team can participate in this challenge. If there is a method in the leaderboard submitted by the organizers, that method will not be taken into account for the final ranking Licence : The data can only be used for the purpose and duration of the challenge. It cannot be distributed. As we did for previous challenges (https://ieee-dataport.org/open-access/cataracts), data will be released publicly after the challenge paper is accepted, under the terms of the ‚ÄúCreative Commons‚Äù Attribution\n(CC-BY) license.\n","link":"//localhost:1313/docs/compose/rules/","section":"docs","title":"üìú Rules"},{"body":"Please follow the instruction that are provided in our github. You can click on the top right github button to access or directly go to this link https://github.com/YouvenZ/MARIO-Challenge-MICCAI-2024\n","link":"//localhost:1313/docs/clarity/preliminary_phase/","section":"docs","title":"Preliminary phase"},{"body":"More details on this phase will come soon.\n","link":"//localhost:1313/docs/clarity/final_phase/","section":"docs","title":"Final phase"},{"body":"The following information outlines a proposed timeline for the challenge, subject to adjustments based on the MICCAI 2024 schedule and the organizers' assessment to guarantee the quality of the challenge.\nRegistration Period:\nApril 1, 2024 - July 10, 2024\nRelease of Training and Off-site Validation Data (Without Labels):\nMay 2, 2024\nOff-site Result Submission Period:\nMay 2, 2024 - July 31, 2024\nAnnouncement of Finalists:\nAugust 1, 2024\nReport (at least 6-page Summary) and Docker Container Submission Period (For Finalists):\nAugust 1, 2024 - September 15, 2024\nRelease of Challenge Results:\nChallenge Day (October 6 or 10, 2024) during the PRIME workshop\n","link":"//localhost:1313/docs/compose/important_date/","section":"docs","title":"üóì Important Dates"},{"body":"Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I'll explain how Hugo uses templates and how you can organize your templates to create a theme. I won't cover using CSS to style your theme.\nWe'll start with creating a new site with a very basic template. Then we'll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026quot;$\u0026quot; prompt. The output will follow. Lines that start with \u0026quot;#\u0026quot; are comments that I've added to explain a point. When I show updates to a file, the \u0026quot;:wq\u0026quot; on the last line means to save the file.\nHere's an example:\n1## this is a comment 2$ echo this is a command 3this is a command 4 5## edit the file 6$ vi foo.md 7+++ 8date = \u0026#34;2014-09-28\u0026#34; 9title = \u0026#34;creating a new theme\u0026#34; 10+++ 11 12bah and humbug 13:wq 14 15## show it 16$ cat foo.md 17+++ 18date = \u0026#34;2014-09-28\u0026#34; 19title = \u0026#34;creating a new theme\u0026#34; 20+++ 21 22bah and humbug 23$ Some Definitions There are a few concepts that you need to understand before creating a theme.\nSkins Skins are the files responsible for the look and feel of your site. It‚Äôs the CSS that controls colors and fonts, it‚Äôs the Javascript that determines actions and reactions. It‚Äôs also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don‚Äôt have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It‚Äôs extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can‚Äôt be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won‚Äôt need to update the site‚Äôs configuration file to use a theme.\nThe Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you‚Äôll need to translate my examples. You‚Äôll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent Content is stored in text files that contain two sections. The first section is the ‚Äúfront matter,‚Äù which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn‚Äôt use the file‚Äôs extension to know the format. It looks for markers to signal the type. TOML is surrounded by ‚Äú+++‚Äù, YAML by ‚Äú---‚Äù, and JSON is enclosed in curly braces. I prefer to use TOML, so you‚Äôll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendere into HTML.\nMarkdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it's published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can‚Äôt find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can‚Äôt find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo‚Äôs choice of templates.\nSingle Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template A partial template is a template that can be included in other templates. Partial templates must be called using the ‚Äúpartial‚Äù template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site Let's use Hugo to create a new web site. I'm a Mac user, so I'll create mine in my home directory, in the Sites folder. If you're using Linux, you might have to create the folder first.\nThe \u0026quot;new site\u0026quot; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n1$ hugo new site ~/Sites/zafta 2$ cd ~/Sites/zafta 3$ ls -l 4total 8 5drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . 6drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. 7drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes 8-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 hugo.toml 9drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content 10drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts 11drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static 12$ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That's a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that's everything that's not content). Since we have an empty site, it won't do much, but it will do it very quickly.\n1$ hugo --verbose 2INFO: 2014/09/29 Using config file: hugo.toml 3INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ 4WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] 5WARN: 2014/09/29 Unable to locate layout: [404.html] 60 draft content 70 future content 80 pages created 90 tags created 100 categories created 11in 2 ms 12$ The \u0026quot;--verbose\u0026quot; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026quot;INFO:\u0026quot; or \u0026quot;WARN:\u0026quot; is present because we used that flag. The lines that start with \u0026quot;WARN:\u0026quot; are warning messages. We'll go over them later.\nWe can verify that the command worked by looking at the directory again.\n1$ ls -l 2total 8 3drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes 4-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 hugo.toml 5drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content 6drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts 7drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public 8drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static 9$ See that new public/ directory? Hugo placed all generated content there. When you're ready to publish your web site, that's the place to start. For now, though, let's just confirm that we have what we'd expect from a site with no content.\n1$ ls -l public 2total 16 3-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml 4-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml 5$ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026quot;server\u0026quot; command. If it is successful, you will see output similar to the following:\n1$ hugo server --verbose 2INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml 3INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ 4WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] 5WARN: 2014/09/29 Unable to locate layout: [404.html] 60 draft content 70 future content 80 pages created 90 tags created 100 categories created 11in 2 ms 12Serving pages from /Users/quoha/Sites/zafta/public 13Web Server is available at http://localhost:1313 14Press Ctrl+C to stop Connect to the listed URL (it's on the line that starts with \u0026quot;Web Server\u0026quot;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That's a listing of your public/ directory. Hugo didn't create a home page because our site has no content. When there's no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet‚Äôs go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven‚Äôt created a template to be used to generate ‚Äúpage not found errors.‚Äù The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was ‚Äúindex.html.‚Äù That‚Äôs only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it's searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we'll cover later that explain the names and paths. For now, just remember that Hugo couldn't find a template for the home page and it told you so.\nAt this point, you've got a working installation and site that we can build upon. All that‚Äôs left is to add some content and a theme to display it.\nCreate a New Theme Hugo doesn't ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe're going to create a new theme called \u0026quot;zafta.\u0026quot; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026quot;post\u0026quot; over \u0026quot;blog\u0026quot;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton Use the hugo \u0026quot;new\u0026quot; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n1 $ hugo new theme zafta 2 3$ ls -l 4total 8 5drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes 6-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 hugo.toml 7drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content 8drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts 9drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public 10drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static 11drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes 12 13$ find themes -type f | xargs ls -l 14-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md 15-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md 16-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html 17-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html 18-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html 19-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html 20-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html 21-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml 22$ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They're optional, but if you're going to be distributing your theme, it tells the world who to praise (or blame). It's also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot; Note that the the skeleton's template files are empty. Don't worry, we'll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme Now that we've got a theme to work with, it's a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026quot;-t zafta\u0026quot; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don't put it in the configuration file or specify it on the command line, you won't use the template that you're expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi hugo.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $ Generate the Site Now that we have an empty theme, let's generate the site again.\n1$ hugo --verbose 2INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml 3INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ 4INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ 5WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 60 draft content 70 future content 80 pages created 90 tags created 100 categories created 11in 2 ms 12$ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme's directory.\nLet's check the public/ directory to see what Hugo's created.\n1$ ls -l public 2total 16 3drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css 4-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html 5-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml 6drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js 7-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml 8$ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn't create any pages. That's because it considers a \u0026quot;page\u0026quot; to be a file created directly from a content file. It doesn't count things like the index.html files that it creates automatically. The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo's warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can't find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n1$ find . -name index.html | xargs ls -l 2-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html 3-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html 4$ The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo's opinion is that you'll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don't like that, you can change the directory names in your theme directory or even delete them completely. Hugo's nice enough to offer its opinion, then behave nicely if you disagree.\n1$ find themes/zafta -type d | xargs ls -ld 2drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta 3drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes 4drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts 5drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default 6drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials 7drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static 8drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css 9drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js 10$ The Theme Development Cycle When you're working on a theme, you will make changes in the theme's directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I‚Äôll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you're building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo's Watch Option Hugo's \u0026quot;--watch\u0026quot; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload Hugo's built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026quot;Wow, that's totally amazing.\u0026quot;\nDevelopment Commands Use the following commands as the basis for your workflow.\n1## purge old files. hugo will recreate the public directory. 2## 3$ rm -rf public 4## 5## run hugo in watch mode 6## 7$ hugo server --watch --verbose Here's sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I've said this before, it's amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme's layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That's not a hard and fast rule (in fact, we'll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page Right now, that page is empty because we don't have any content and we don't have any logic in the template. Let's change that by adding some text to the template.\n1\u0026lt;!-- vi themes/zafta/layouts/index.html --\u0026gt; 2\u0026lt;!DOCTYPE html\u0026gt; 3\u0026lt;html\u0026gt; 4 \u0026lt;body\u0026gt; 5 \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; 6 \u0026lt;/body\u0026gt; 7\u0026lt;/html\u0026gt; Build the web site and then verify the results.\n1$ hugo --verbose 2INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml 3INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ 4INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ 5WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 60 draft content 70 future content 80 pages created 90 tags created 100 categories created 11in 2 ms 12 13$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l 14-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html 15 16$ cat public/index.html 17\u0026lt;!DOCTYPE html\u0026gt; 18\u0026lt;html\u0026gt; 19\u0026lt;body\u0026gt; 20 \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; 21\u0026lt;/html\u0026gt; Live Reload Note: If you're running the server with the --watch option, you'll see different content in the file:\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;body\u0026gt; 4 \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; 5\u0026lt;script\u0026gt; 6 document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; 7 + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] 8 + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; 9 + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026quot;Dynamic\u0026quot; Home Page \u0026quot;Dynamic home page?\u0026quot; Hugo's a static web site generator, so this seems an odd thing to say. I mean let's have the home page automatically reflect the content in the site every time Hugo builds it. We'll use iteration in the template to do that.\nCreate New Posts Now that we have the home page generating static content, let's add some content to the site. We'll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n1$ hugo --verbose new post/first.md 2INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml 3INFO: 2014/09/29 attempting to create post/first.md of post 4INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md 5ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} That wasn't very nice, was it?\nThe \u0026quot;new\u0026quot; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there's a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n1 $ vi themes/zafta/archetypes/post.md 2 +++ 3 Description = \u0026#34;\u0026#34; 4 Tags = [] 5 Categories = [] 6 +++ 7 :wq 8 9 $ find themes/zafta/archetypes -type f | xargs ls -l 10 -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md 11 -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md 12 13 $ hugo --verbose new post/first.md 14 INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml 15 INFO: 2014/09/29 attempting to create post/first.md of post 16 INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md 17 INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md 18 /Users/quoha/Sites/zafta/content/post/first.md created 19 20 $ hugo --verbose new post/second.md 21 INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml 22 INFO: 2014/09/29 attempting to create post/second.md of post 23 INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md 24 INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md 25 /Users/quoha/Sites/zafta/content/post/second.md created 26 27 $ ls -l content/post 28 total 16 29 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md 30 -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md 31 32 $ cat content/post/first.md 33 +++ 34 Categories = [] 35 Description = \u0026#34;\u0026#34; 36 Tags = [] 37 date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; 38 title = \u0026#34;first\u0026#34; 39 40 +++ 41 my first post 42 43 $ cat content/post/second.md 44 +++ 45 Categories = [] 46 Description = \u0026#34;\u0026#34; 47 Tags = [] 48 date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; 49 title = \u0026#34;second\u0026#34; 50 51 +++ 52 my second post 53 54 $ Build the web site and then verify the results.\n1$ rm -rf public 2$ hugo --verbose 3INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml 4INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ 5INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ 6INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} 7WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 80 draft content 90 future content 102 pages created 110 tags created 120 categories created 13in 4 ms 14$ The output says that it created 2 pages. Those are our new posts:\n1$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l 2-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html 3-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html 4-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html 5-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html 6$ The new files are empty because because the templates used to generate the content are empty. The homepage doesn't show the new content, either. We have to update the templates to add the posts.\nList and Single Templates In Hugo, we have three major kinds of templates. There's the home page template that we updated previously. It is used only by the home page. We also have \u0026quot;single\u0026quot; templates which are used to generate output for a single content file. We also have \u0026quot;list\u0026quot; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026quot;list.html\u0026quot; and single templates are named \u0026quot;single.html.\u0026quot;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage The home page will contain a list of posts. Let's update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n1 \u0026lt;!-- $ vi themes/zafta/layouts/index.html --\u0026gt; 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;body\u0026gt; 5 {{ range first 10 .Data.Pages }} 6 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 7 {{ end }} 8 \u0026lt;/body\u0026gt; 9 \u0026lt;/html\u0026gt; 10 \u0026lt;!-- :wq --\u0026gt; Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026quot;{{\u0026quot; and \u0026quot;}}\u0026quot;. In our template, the commands are:\nrange .Title end The \u0026quot;range\u0026quot; command is an iterator. We're going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026quot;.Title\u0026quot; command prints the value of the \u0026quot;title\u0026quot; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026quot;end\u0026quot; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026quot;end.\u0026quot; Everything between the \u0026quot;range\u0026quot; and \u0026quot;end\u0026quot; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt's helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n1 $ rm -rf public 2 $ hugo --verbose 3 INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml 4 INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ 5 INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ 6 INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} 7 WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 8 0 draft content 9 0 future content 10 2 pages created 11 0 tags created 12 0 categories created 13 in 4 ms 14 $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l 15 -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html 16 -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html 17 -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html 18 -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html 19 $ cat public/index.html 20 \u0026lt;!DOCTYPE html\u0026gt; 21 \u0026lt;html\u0026gt; 22 \u0026lt;body\u0026gt; 23 24 \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; 25 26 \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; 27 28 \u0026lt;/body\u0026gt; 29 \u0026lt;/html\u0026gt; 30 $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let's take a moment to appreciate what we've done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you've learned everything you need to know to build a theme. All that's really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don't worry, though, that's all to come.\nAdd Content to the Posts We're working with posts, which are in the content/post/ directory. That means that their section is \u0026quot;post\u0026quot; (and if we don't do something weird, their type is also \u0026quot;post\u0026quot;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can't find one, then it will look in the _default/ directory. There are some twists that we'll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let's see what we actually have available:\n1 $ find themes/zafta -name single.html | xargs ls -l 2 -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don't know of any other content types, let's start with updating the default.\nRemember, any content that we haven't created a template for will end up using this template. That can be good or bad. Bad because I know that we're going to be adding different types of content and we're going to end up undoing some of the changes we've made. It's good because we'll be able to see immediate results. It's also good to start here because we can start to build the basic layout for the site. As we add more content types, we'll refactor this file and move logic around. Hugo makes that fairly painless, so we'll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you're building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That's a refreshing amount of joy right there.\nUpdate the Template File 1 $ vi themes/zafta/layouts/_default/single.html 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;head\u0026gt; 5 \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; 6 \u0026lt;/head\u0026gt; 7 \u0026lt;body\u0026gt; 8 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 9 {{ .Content }} 10 \u0026lt;/body\u0026gt; 11 \u0026lt;/html\u0026gt; 12 :wq Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html 1 \u0026lt;!DOCTYPE html\u0026gt; 2 \u0026lt;html\u0026gt; 3 \u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; 5 \u0026lt;/head\u0026gt; 6 \u0026lt;body\u0026gt; 7 \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; 8 \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; 9 10 \u0026lt;/body\u0026gt; 11 \u0026lt;/html\u0026gt; 12 13 $ cat public/post/second/index.html 14 \u0026lt;!DOCTYPE html\u0026gt; 15 \u0026lt;html\u0026gt; 16 \u0026lt;head\u0026gt; 17 \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; 18 \u0026lt;/head\u0026gt; 19 \u0026lt;body\u0026gt; 20 \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; 21 \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; 22 23 \u0026lt;/body\u0026gt; 24 \u0026lt;/html\u0026gt; 25 $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content The posts are on the home page. Let's add a link from there to the post. Since this is the home page, we'll update its template.\n1 $ vi themes/zafta/layouts/index.html 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;body\u0026gt; 5 {{ range first 10 .Data.Pages }} 6 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 7 {{ end }} 8 \u0026lt;/body\u0026gt; 9 \u0026lt;/html\u0026gt; Build the web site and verify the results.\n1 $ rm -rf public 2 $ hugo --verbose 3 INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/hugo.toml 4 INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ 5 INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ 6 INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} 7 WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 8 0 draft content 9 0 future content 10 2 pages created 11 0 tags created 12 0 categories created 13 in 4 ms 14 15 $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l 16 -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html 17 -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html 18 -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html 19 -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html 20 21 $ cat public/index.html 22 \u0026lt;!DOCTYPE html\u0026gt; 23 \u0026lt;html\u0026gt; 24 \u0026lt;body\u0026gt; 25 26 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 27 28 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 29 30 \u0026lt;/body\u0026gt; 31 \u0026lt;/html\u0026gt; 32 33 $ Create a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let's make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let's take a quick look and see which list templates are available.\n1 $ find themes/zafta -name list.html | xargs ls -l 2 -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don't have multiple content types, so let's stay consistent and update the default list template.\nCreating Top Level Pages Let's add an \u0026quot;about\u0026quot; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let's verify that by creating an \u0026quot;about\u0026quot; page at the top level:\n1$ vi content/about.md 2+++ 3title = \u0026#34;about\u0026#34; 4description = \u0026#34;about this site\u0026#34; 5date = \u0026#34;2014-09-27\u0026#34; 6slug = \u0026#34;about time\u0026#34; 7+++ 8 9## about us 10 11i\u0026#39;m speechless 12:wq Generate the web site and verify the results.\n1 $ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l 2 -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html 3 -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html 4 -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html 5 -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html 6 -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn't created at the top level. It was created in a sub-directory named 'about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It's a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n1 \u0026lt;!-- $ cat public/index.html --\u0026gt; 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;body\u0026gt; 5 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 6 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 7 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 8 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 9 \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; 10 + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] 11 + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; 12 + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; 13 \u0026lt;/html\u0026gt; Notice that the \u0026quot;about\u0026quot; link is listed with the posts? That's not desirable, so let's change that first.\n1 \u0026lt;!-- $ vi themes/zafta/layouts/index.html --\u0026gt; 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;body\u0026gt; 5 \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; 6 {{ range first 10 .Data.Pages }} 7 {{ if eq .Type \u0026#34;post\u0026#34;}} 8 \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; 9 {{ end }} 10 {{ end }} 11 12 \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; 13 {{ range .Data.Pages }} 14 {{ if eq .Type \u0026#34;page\u0026#34; }} 15 \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; 16 {{ end }} 17 {{ end }} 18 \u0026lt;/body\u0026gt; 19 \u0026lt;/html\u0026gt; 20 \u0026lt;!-- :wq --\u0026gt; Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n1 $ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l 2 -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html 3 -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html 4 -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html 5 -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html 6 -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let's do it the hard way and change the permalink in the configuration file.\n$ vi hugo.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot; Generate the web site and verify that this didn't work. Hugo lets \u0026quot;slug\u0026quot; or \u0026quot;URL\u0026quot; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates If you've been following along, you probably noticed that posts have titles in the browser and the home page doesn't. That's because we didn't put the title in the home page's template (layouts/index.html). That's an easy thing to do, but let's look at a different option.\nWe can put the common bits into a shared template that's stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme's presentation.\n1 $ vi themes/zafta/layouts/partials/header.html 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;head\u0026gt; 5 \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; 6 \u0026lt;/head\u0026gt; 7 \u0026lt;body\u0026gt; 8 :wq 9 10 $ vi themes/zafta/layouts/partials/footer.html 11 \u0026lt;/body\u0026gt; 12 \u0026lt;/html\u0026gt; 13 :wq Update the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }} versus\n{{ partial \u0026quot;header.html\u0026quot; . }} Both pass in the context.\nLet's change the home page template to use these new partials.\n1{{ partial \u0026#34;header.html\u0026#34; . }} 2 3\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; 4{{ range first 10 .Data.Pages }} 5 {{ if eq .Type \u0026#34;post\u0026#34;}} 6 \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; 7 {{ end }} 8{{ end }} 9 10\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; 11{{ range .Data.Pages }} 12 {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} 13 \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; 14 {{ end }} 15{{ end }} 16{{ partial \u0026#34;footer.html\u0026#34; . }} Generate the web site and verify the results. The title on the home page is now \u0026quot;your title here\u0026quot;, which comes from the \u0026quot;title\u0026quot; variable in the hugo.toml file.\nUpdate the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd ‚ÄúDate Published‚Äù to Posts It's common to have posts display the date that they were written or published, so let's add that. The front matter of our posts has a variable named \u0026quot;date.\u0026quot; It's usually the date the content was created, but let's pretend that's the value we want to display.\nAdd ‚ÄúDate Published‚Äù to the Template We'll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\nPosts use the default single template, so we'll change that file.\n1\u0026lt;!-- themes/zafta/layouts/_default/single.html --\u0026gt; 2{{ partial \u0026#34;header.html\u0026#34; . }} 3 4 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 5 \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; 6 {{ .Content }} 7 8{{ partial \u0026#34;footer.html\u0026#34; . }} Generate the web site and verify the results. The posts now have the date displayed in them. There's a problem, though. The \u0026quot;about\u0026quot; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026quot;if\u0026quot; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026quot;if\u0026quot; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026quot;code for today,\u0026quot; too.\nLet's assume, though, that we've made our site so complex that we feel we have to create a new template type. In Hugo-speak, we're going to create a section template.\nLet's restore the default single template before we forget.\n1 \u0026lt;!-- mkdir themes/zafta/layouts/post --\u0026gt; 2 $ vi themes/zafta/layouts/_default/single.html 3 {{ partial \u0026#34;header.html\u0026#34; . }} 4 5 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 6 {{ .Content }} 7 8 {{ partial \u0026#34;footer.html\u0026#34; . }} Now we'll update the post's version of the single template. If you remember Hugo's rules, the template engine will use this version over the default.\n1\u0026lt;!-- themes/zafta/layouts/post/single.html --\u0026gt; 2{{ partial \u0026#34;header.html\u0026#34; . }} 3 4 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 5 \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; 6 {{ .Content }} 7 8{{ partial \u0026#34;footer.html\u0026#34; . }} Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn't.\nDon't Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you're figuring that out, accept that you'll be doing some refactoring. Hugo makes that easy and fast, so it's okay to delay splitting up a template.\n","link":"//localhost:1313/about/article/","section":"about","title":"zefzaf"},{"body":"First if you do not have a CodaBench account yet, create one here:\nSecond fill the following form, fill the form and send it to rachid.zeghlache@univ-brest.fr. Also please make sure to add \u0026quot;MARIO 2024 Challenge\u0026quot; in the subject of your mail in order to faciliate the. Finally add the your Team name for naming form (i.e MARIO 2024 Data Challenge Participation Form_team_name.pdf). Once completed and signed, we will verify the document and within the next 48 working hours you will receive the a link to download the dataset.\nVisit üëáüëáüëá to come come play at MARIO with us üïπÔ∏è üçÑ .\nParticipate to the first task using this link\nParticipate to the second task using this link\nAfter registering in CodaBench, you need to go to the link mentioned above and do the following in order to enter the challenge tasks:\n","link":"//localhost:1313/docs/","section":"docs","title":""},{"body":"Comming soon ! Stay tuned\n","link":"//localhost:1313/docs/compose/announcement/","section":"docs","title":""},{"body":"","link":"//localhost:1313/categories/","section":"categories","title":"Categories"},{"body":" üïπÔ∏è üçÑ Monitoring Age-related Macular Degeneration Progression In Optical Coherence Tomography (MARIO) - MICCAI Challenge 2024 Welcome to the MARIO website üëã, MARIO was accepted for the edition of MICCAI challenge 2024 üöÄ. The challenge is hosted on the Codabench plateform.\nFor the first task üöÄ click here\nFor the second task üöÄ click here\nFor this special edition of MICCAI, we are proud to provide participants the chance to challenge their methods trained on patient data from Europe. Participants can test their algorithms with a unique set of patient data coming from the African continent to evaluate the domain generalizability of their models Part of MICCAI 2024¬†challenge¬†Context Age-related Macular Degeneration (AMD) is a progressive degeneration of the macula, the central part of the retina, affecting nearly 196 million people worldwide 1. It can appear from the age of 50, and more frequently from the age of 65 onwards, causing a significant weakening of visual capacities, without destroying them. It is a complex and multifactorial pathology in which genetic and environmental risk factors are intertwined. Advanced stages of the disease (atrophy and neovascularization) affect nearly 20% of patients: they are the first cause of severe visual impairment and blindness in developed countries. Since their introduction in 2007, Anti‚Äìvascular endothelial growth factor (anti-VEGF) treatments have proven their ability to slow disease progression and even improve visual function in neovascular forms of AMD 2. This effectiveness is optimized by ensuring a short time between the diagnosis of the pathology and the start of treatment as well as by performing regular checks and retreatment as soon as necessary 3. It is now widely accepted that the indication for anti-VEGF treatments is based on the presence of exudative signs (subretinal and intraretinal fluid, intraretinal hyperreflective spots, etc.) visible on optical coherence tomography (OCT) 4, a 3-D imaging modality.The use of AI for the prediction of AMD 5 mainly focus on the first onset of early/intermediate (iAMD), atrophic (GA), and neovascular (nAMD) stage. And there is no current work on the prediction of the development of the AMD in close monitoring for patient in anti-VEGF treatments plan. Therefore, being able to reliably detect an evolution in neovascular activity 6 by monitoring exudative signs is crucial for the correct implementation of anti-VEGF treatment strategies, which are now individualized. The objective of this challenge is to evaluate existing and new algorithms to recognize the evolution of neovascular activity in OCT scans of patients with exudative AMD, for the purpose of improving the planning of anti-VEGF treatments.\nMotivation The objective of this challenge is to evaluate existing and new algorithms to recognize the evolution of neovascular activity in OCT scans of patients with exudative AMD, for the purpose of improving the planning of anti-VEGF treatments.\nChallenge Format There are three main phases to this challenge:\nTraining data \u0026amp; off-site validation data Off-site result submission ==\u0026gt; finalists Report¬†(For eligible solution present in the leader-board)+ Docker container submission period (for finalists) All challenge submissions are in the form of a docker container, which means that participants should submit their method to be evaluated on the test sets. The training set will be released during the challenge and participants will not have access to any part of the test set.\nTasks: Two tasks will be addressed in the challenge: The first task focuses on pairs of 2D slices (B-scans) from two consecutive OCT acquisitions. The goal is to classify the evolution between these two slices (before and after), which clinicians typically examine side by side on their screens. The second task focuses on 2D slices level. The goal is to predict the future evolution within 3 months with close monitoring of patients that are enrolled in an anti-VEGF treatments plan. To sum up In summary, the first task aims to automate the initial step of the analysis (useful for decision support) and the second task aims to automate the complete analysis process (useful for autonomous AI).\nChallenge Paper Proceedings üì¢ Call for Papers Thanks to the initiative of the BASIRA lab and in collaboration with the MICCAI PRIME Workshop, all teams that made it to the final phase will have the opportunity to have their challenge paper published in the International Workshop on Predictive Intelligence in Medicine. This is part of the book series: Lecture Notes in Computer Science (LNCS). For more details, please refer to the following page. To ensure transparency and reproducibility, we require participants to submit a brief method description alongside their validation test set results. An Overleaf template is available here to facilitate this process. Challenge papers should adhere to the MICCAI 2024 paper submission guidelines: MICCAI 2024 paper submission guidelines. The paper description should focus on the key steps involved in developing your submitted approach. Here are some recommended elements to include:\nSubmission Guidelines Formatting Requirements: Papers should follow the Springer Lecture Notes in Computer Science (LNCS) format. An Overleaf template is available here. Paper Length: Adhere to MICCAI 2024 paper submission guidelines. Submission System: Submit your papers via the Conference Management Toolkit (CMT) website here. Paper Content: Include the following sections: Introduction Method (Pre-processing, Proposed method, Pre-training, Post-processing) Results Discussion Link to public code repository Author Guidelines Presentation Format: Papers for both tasks can be submitted as one combined paper or as separate papers. Registration Requirements: All accepted authors must register by the specified deadlines. Publication: Accepted papers will be published in the International Workshop on Predictive Intelligence in Medicine (PRIME) as part of the Lecture Notes in Computer Science (LNCS) series. üóì Important Dates Deadline for paper submission: 01/09/2024 11:59PM (pacific time) Decision about paper (acceptance or rebuttal): 13/11/2024 11:59PM (pacific time) Camera-ready paper: 20/09/2024 11:59PM (pacific time) Camera-Ready Paper Submission Guidelines To submit your final camera-ready paper, please follow these instructions carefully:\nZip File Requirements:\nYour zip file should include: The final PDF of your camera-ready paper. All source files necessary to regenerate the final PDF. For LaTeX users, include .tex, .bib, all figures, and any other required files. For Word users, include the .docx file. Name the main file using your submission ID number (e.g., 16.tex or 16.docx). Copyright Form:\nInclude the signed PDF of the MARIO LNCS Copyright Form in your submission. Paper Length:\nThe paper should be between 8 and 12.5 pages.\nFinal Submission:\nEnsure that the copyright forms are filled out correctly before submission.\nUpload a single zip file (not .rar) containing everything, using your paper ID for the file name (e.g., MARIO-32.zip).\nFailure to follow these guidelines may result in delays in processing your submission.\nInstitutions and partners References Jonas JB, Cheung CMG, Panda-Jonas S. Updates on the Epidemiology of Age-Related Macular Degeneration. Asia Pac J Ophthalmol (Phila). 2017 Nov-Dec;6(6):493-497. ‚Ü©Ô∏é\nRosenfeld PJ, Brown DM, Heier JS, Boyer DS, Kaiser PK, Chung CY, et al. Ranibizumab for neovascular age-related macular degeneration. N Engl J Med. 2006 Oct;355(14):1419-31. ‚Ü©Ô∏é\nRasmussen A, Sander B. Long-term longitudinal study of patients treated with ranibizumab for neovascular age-related macular degeneration. Curr Opin Ophthalmol. 2014 May;25(3):158-63. ‚Ü©Ô∏é\nFreund KB, Korobelnik J-F, Devenyi R, Framme C, Galic J, Herbert E, et al. Treat-and-extend regimens with anti- VEGF agents in retinal diseases : A Literature Review and Consensus Recommendations. Retina (Philadelphia, Pa). 2015 Aug;35(8):1489-506. ‚Ü©Ô∏é\nBhuiyan A, Wong TY, Ting DSW, Govindaiah A, Souied EH, Smith RT. Artificial Intelligence to Stratify Severity of Age-Related Macular Degeneration (AMD) and Predict Risk of Progression to Late AMD. Transl Vis Sci Technol. 2020 Apr 24;9(2):25. doi: 10.1167/tvst.9.2.25. PMID: 32818086; PMCID: PMC7396183. ‚Ü©Ô∏é\nLi E, Donati S, Lindsley KB, Krzystolik MG, Virgili G. Treatment regimens for administration of anti-vascular endothelial growth factor agents for neovascular age-related macular degeneration. Cochrane Database Syst Rev. 2020 May 5;5(5):CD012208. doi: 10.1002/14651858.CD012208.pub2. PMID: 32374423; PMCID: PMC7202375. ‚Ü©Ô∏é\n","link":"//localhost:1313/","section":"","title":"MARIO challenge"},{"body":"","link":"//localhost:1313/tags/","section":"tags","title":"Tags"}]